// Code generated by "esc -pkg builtinmanifests -prefix  -ignore  -include  -o resources.go manifests"; DO NOT EDIT.

package builtinmanifests

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return []os.FileInfo(fis[0:limit]), nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/manifests/large_php.yml": {
		name:    "large_php.yml",
		local:   "manifests/large_php.yml",
		size:    3549,
		modtime: 1542036426,
		compressed: `
H4sIAAAAAAAC/+xW34vcNhB+918x3L0kZXdze4RQ/NaWlgYChfygD6WYsTxrqydLqmbkvc1fXyx7be/t
bpqUPrQQDo7VfKOZ0TfzyVqv1xmrhlrMobvbbLOMbFdYbCmHh2hNtFkgdjEoKurgoh+x9jCixikU7WwO
hCyRs0wjcg74MQaCW5BGMyi0UNJocwHYtQROGgrgDcrOhTbLunbIwHkGsIYhzx+x9aV7zAAAWhLM0y+A
oRY5+Cc+ykUrOWzTgh9iDu8EbYWhKr7fcrIOm7r2SXFd21fWtcwrUDEEsmIO4Kw59JBm4Oi9C0JViuK4
8MHttKFjSVi12p5SNwBG2/hYKGd3uo5hYGuEAJibeQHgY2m0Kh7owEtzT8izZ0MG5mYzuz1/PhxVXMB6
qkW3iwWA2+0o5PChjFbiOwodhewkIzc9/gNaZ7VCM1fXM7h9tbl7uX7z/t1k7ihw6rlBIZbR7rioND/M
aVu0WFOVrGOvpm68eTuHU6gabesc3hJWvwYtNEOBUKhwfpixn4JrX/dnGx0qFEzhF2ytPzvvJzOf5f6x
9XJYwCk6649U1GUO27u7Cbsdx7fveUd2oCpGXS1GrqRkeZEGeQV6l5YrcHYAYO+iqfrBrC0FFKoAOUVN
aSzJ3oX52GvgWFqScf7Ykqy3U0Gjd8GkYtByOJEyc1NYrrMnI6h9DiwoWmULPe6pXHMaIP5SvX2VzVfZ
/L9kYxxWRYkGraIwupzarvmWqB7IVgVWVSDmwjtnxgAXoc+U6p7KQXyTYIMzxPmRIM0QmSoQBzUN5wdp
CCryxh1asgKsgvbC0/mXwtv4xmdZZ0lOvsHdzMqxaPaoqO/eJv292L4a5JTIXLB7kdaAtl5uvn85QTUK
7fEwgdssOyH2pK5LrTi5gpLlEt9nFX6iKQ2hkaa/tUo629eI+AGaL4bgxClncvhZxMMtDEJAAx2a2Dfr
t/fKrxI6/Off580uSA7fzpoI9GcklsKjNDncvLiB22TTgap++o/Z0gOFpO98SuvCEHoDv/TPrL1mWoGW
3s06ATTG7anaPG0UN1dP8175J2Xe3w8jGM0VYnrkcqTrtHyo/Aq+M2bmZBeclb45Z+Qcu3YV+HL5Lbtd
nPU4u6zOk6k81+jZpouMpZas+2QLyrTrN+Rwv7gmKx1IDXfra1u6aKsJQqWIOe/5c/u/6eH4qO+5K0ZF
3nxzM2chFm3TV/fEZ8HyGGFiMtBOP16PctlvOXr/hDDm5gJf2/8MX6NI/iW+sg6DxnJkY2Li+MBZvLf6
1V8BAAD//8Ew01bdDQAA
`,
	},

	"/manifests/maximum_php.yml": {
		name:    "maximum_php.yml",
		local:   "manifests/maximum_php.yml",
		size:    3549,
		modtime: 1542036426,
		compressed: `
H4sIAAAAAAAC/+xW34vcNhB+918x3L0kZXdze4RQ/NaWlgYChfygD6WYsTxrqydLqmbkvc1fXyx7be/t
bpqUPrQQDo7VfKOZ0TfzyVqv1xmrhlrMobvbbLOMbFdYbCmHh2hNtFkgdjEoKurgoh+x9jCixikU7WwO
hCyRs0wjcg74MQaCW5BGMyi0UNJocwHYtQROGgrgDcrOhTbLunbIwHkGsIYhzx+x9aV7zAAAWhLM0y+A
oRY5+Cc+ykUrOWzTgh9iDu8EbYWhKr7fcrIOm7r2SXFd21fWtcwrUDEEsmIO4Kw59JBm4Oi9C0JViuK4
8MHttKFjSVi12p5SNwBG2/hYKGd3uo5hYGuEAJibeQHgY2m0Kh7owEtzT8izZ0MG5mYzuz1/PhxVXMB6
qkW3iwWA2+0o5PChjFbiOwodhewkIzc9/gNaZ7VCM1fXM7h9tbl7uX7z/t1k7ihw6rlBIZbR7rioND/M
aVu0WFOVrGOvpm68eTuHU6gabesc3hJWvwYtNEOBUKhwfpixn4JrX/dnGx0qFEzhF2ytPzvvJzOf5f6x
9XJYwCk6649U1GUO27u7Cbsdx7fveUd2oCpGXS1GrqRkeZEGeQV6l5YrcHYAYO+iqfrBrC0FFKoAOUVN
aSzJ3oX52GvgWFqScf7Ykqy3U0Gjd8GkYtByOJEyc1NYrrMnI6h9DiwoWmULPe6pXHMaIP5SvX2VzVfZ
/L9kYxxWRYkGraIwupzarvmWqB7IVgVWVSDmwjtnxgAXoc+U6p7KQXyTYIMzxPmRIM0QmSoQBzUN5wdp
CCryxh1asgKsgvbC0/mXwtv4xmdZZ0lOvsHdzMqxaPaoqO/eJv292L4a5JTIXLB7kdaAtl5uvn85QTUK
7fEwgdssOyH2pK5LrTi5gpLlEt9nFX6iKQ2hkaa/tUo629eI+AGaL4bgxClncvhZxMMtDEJAAx2a2Dfr
t/fKrxI6/Off580uSA7fzpoI9GcklsKjNDncvLiB22TTgap++o/Z0gOFpO98SuvCEHoDv/TPrL1mWoGW
3s06ATTG7anaPG0UN1dP8175J2Xe3w8jGM0VYnrkcqTrtHyo/Aq+M2bmZBeclb45Z+Qcu3YV+HL5Lbtd
nPU4u6zOk6k81+jZpouMpZas+2QLyrTrN+Rwv7gmKx1IDXfra1u6aKsJQqWIOe/5c/u/6eH4qO+5K0ZF
3nxzM2chFm3TV/fEZ8HyGGFiMtBOP16PctlvOXr/hDDm5gJf2/8MX6NI/iW+sg6DxnJkY2Li+MBZvLf6
1V8BAAD//8Ew01bdDQAA
`,
	},

	"/manifests/medium_php.yml": {
		name:    "medium_php.yml",
		local:   "manifests/medium_php.yml",
		size:    3549,
		modtime: 1542036426,
		compressed: `
H4sIAAAAAAAC/+xW34vcNhB+918x3L0kZXdze4RQ/NaWlgYChfygD6WYsTxrqydLqmbkvc1fXyx7be/t
bpqUPrQQDo7VfKOZ0TfzyVqv1xmrhlrMobvbbLOMbFdYbCmHh2hNtFkgdjEoKurgoh+x9jCixikU7WwO
hCyRs0wjcg74MQaCW5BGMyi0UNJocwHYtQROGgrgDcrOhTbLunbIwHkGsIYhzx+x9aV7zAAAWhLM0y+A
oRY5+Cc+ykUrOWzTgh9iDu8EbYWhKr7fcrIOm7r2SXFd21fWtcwrUDEEsmIO4Kw59JBm4Oi9C0JViuK4
8MHttKFjSVi12p5SNwBG2/hYKGd3uo5hYGuEAJibeQHgY2m0Kh7owEtzT8izZ0MG5mYzuz1/PhxVXMB6
qkW3iwWA2+0o5PChjFbiOwodhewkIzc9/gNaZ7VCM1fXM7h9tbl7uX7z/t1k7ihw6rlBIZbR7rioND/M
aVu0WFOVrGOvpm68eTuHU6gabesc3hJWvwYtNEOBUKhwfpixn4JrX/dnGx0qFEzhF2ytPzvvJzOf5f6x
9XJYwCk6649U1GUO27u7Cbsdx7fveUd2oCpGXS1GrqRkeZEGeQV6l5YrcHYAYO+iqfrBrC0FFKoAOUVN
aSzJ3oX52GvgWFqScf7Ykqy3U0Gjd8GkYtByOJEyc1NYrrMnI6h9DiwoWmULPe6pXHMaIP5SvX2VzVfZ
/L9kYxxWRYkGraIwupzarvmWqB7IVgVWVSDmwjtnxgAXoc+U6p7KQXyTYIMzxPmRIM0QmSoQBzUN5wdp
CCryxh1asgKsgvbC0/mXwtv4xmdZZ0lOvsHdzMqxaPaoqO/eJv292L4a5JTIXLB7kdaAtl5uvn85QTUK
7fEwgdssOyH2pK5LrTi5gpLlEt9nFX6iKQ2hkaa/tUo629eI+AGaL4bgxClncvhZxMMtDEJAAx2a2Dfr
t/fKrxI6/Off580uSA7fzpoI9GcklsKjNDncvLiB22TTgap++o/Z0gOFpO98SuvCEHoDv/TPrL1mWoGW
3s06ATTG7anaPG0UN1dP8175J2Xe3w8jGM0VYnrkcqTrtHyo/Aq+M2bmZBeclb45Z+Qcu3YV+HL5Lbtd
nPU4u6zOk6k81+jZpouMpZas+2QLyrTrN+Rwv7gmKx1IDXfra1u6aKsJQqWIOe/5c/u/6eH4qO+5K0ZF
3nxzM2chFm3TV/fEZ8HyGGFiMtBOP16PctlvOXr/hDDm5gJf2/8MX6NI/iW+sg6DxnJkY2Li+MBZvLf6
1V8BAAD//8Ew01bdDQAA
`,
	},

	"/manifests/small_php.yml": {
		name:    "small_php.yml",
		local:   "manifests/small_php.yml",
		size:    4366,
		modtime: 1542036426,
		compressed: `
H4sIAAAAAAAC/+xXTW8bNxO+76+YV74kLyTFcuy03VvTpmmAFAnygR6KYsElR1rWXJLhkFLkX1+QXO2H
JCdp0UMLBAYM7TzkzPCZL3KxWBTEG2xZCdvL5aooUG8rzVos4TZoFXThkExwHKuNM8F2WLvvUGU489Lo
EpCRD1QUkjEqgd0Fh3ABvpEEnGmosZMZB2RaBOMbdGAV82vj2qLYttkClQXAArKdP0Jra/OxAABo0bMy
/QLIvvi9PVrDTdC+hNWwAdJPug0lvPVMC+ZE9XRFSZr3b9sjP7dtdHLbEs2BB+dQe7UHo9U+QpKAgrXG
eRRJi6HKOrOWCg/eMdFKPWUxA0rq8LHiRq/lJrhMXAcBEDXDB4ANtZK8usU9jcWRmwcPsgWiZjkse/gw
H9Ubxza9L7IdfQCY9RpdCe/roH14i26LrphYpCbiPzBttORMDd5FBldPlpfXi5fv3vbiLTpK4VfMI/lO
bqgSkm4Hsy3TbIMiSbuw9dF4+WZQxxlvpN6U8AaZ+NVJjwPkkHmsjM3p9pMz7Yt4tm6BYJ4l9SO2Fl9s
95OWT2w/a63fj+CkneQdVpu6hNXlZY9ddJkcY75FnakKQYpRytWYJI9STs9BrtPnHIzOAOxMUCIm5kaj
Yx4FMEpakxmNfmfccOwFUKg1+i7/SKNfrHqHutUVIQ9O+v2kqomaStOmOEpBaUsgz7zkxag0d1gvKCUQ
nZbeZ+rta918rZv/Vt0ow0RVM8U0R9ctmcruW1szfotaVEwIh0SVNUZ1Cs5CX1irO6xz9fUV64xCKg8E
SYJAKMAb2GA+P/gGQaBVZt+i9kDcSeupP/+48Ja2sUWx1egn83g7sHJwmizjGKO3TH+PVk9yOSUyR+ye
pdUxvRlvvrruoQ3zuGP7HlwVxYTYiV/nQjHpQUlyju8TDz8RlAaZ8k3sWjWe7Gu8txkaGoMz3nCjSvjZ
ewsXkAuBKdgyFWKwfnvH7Tyh+T/9Pmw2zpfw7VATDj8EJF9Z5psSZo9mcJFk0qGI2X+wlm4o6GPkk1nj
suolvIpXrp0knIP0cZk2HphSZodieRwoau49zTtuj9y8usopGNQ9xETkvKb7aXkv7By+V2rgZO2M9jE4
J+QconYv8NfLbxzt6iTGxfnqnGTlaY2ebDrLWArJIhobUSZN3FDC1ahNCumQ5976QtcmaNFDjHMkKiN/
ZveZGHYX/Mhd1VXk7P+zwQqSlzpN3cmaEcudhp5Jh2v58X4t59eNU+/vEEbUnOFr9a/hqyuSf4ivoruw
VIynq9ck846wLqtPHmt9m6RDmyyG8ZEePGvj0tiIeSw5Qs3iUImXhvgrTd29CbBjOjWcPF3SjvgOPFxz
lsUFWIWMMA6lBKdpBVKTRyaWRbunD6o66O3O0spNnFvV2pk2DjapheRxkO0adAg7BGrSjO8Wxv7QHhqZ
cXIjddUY8iUwElPxwdIZKBC6Lq2OIcuIdsaJAcoLZ3loLtIpcgj7C97sZvnNrLshu9jcchZ4Ge+Lz9No
Vq+Ds4bie/m1IZK1wqEVzp4yknw2h9l0cZT8gq1x+1fWy1beoZjlTrlmrVT7pPzmvMrnqK87jTfdpsP1
F+KW7gOkhudP58f9OdEMNzHe15ffPelHa7CVQ486paxgeyrh8U1WTqpCvTaOY7x5lPBMs1qhOO9dB0YH
f5SUf2cnh9B0jEdBJncIzYzVXKyuHl//b1YUW+Zk1DCpjv4VMHqVxK8/AwAA//+u4aUuDhEAAA==
`,
	},

	"/manifests": {
		name:  "manifests",
		local: `manifests`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"manifests": {
		_escData["/manifests/large_php.yml"],
		_escData["/manifests/maximum_php.yml"],
		_escData["/manifests/medium_php.yml"],
		_escData["/manifests/small_php.yml"],
	},
}
