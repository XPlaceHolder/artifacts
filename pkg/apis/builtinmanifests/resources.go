// Code generated by "esc -pkg builtinmanifests -prefix  -ignore  -include  -o resources.go manifests"; DO NOT EDIT.

package builtinmanifests

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return []os.FileInfo(fis[0:limit]), nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/manifests/large_php.yml": {
		name:    "large_php.yml",
		local:   "manifests/large_php.yml",
		size:    3835,
		modtime: 1542198196,
		compressed: `
H4sIAAAAAAAC/+xW34vcNhB+918x3L1ky+7m9gih+K0tLQ0ECrkLfSjFyPKsrZwsqZqR9zZ/fZHstb2/
8qP0oYUQCKeZ0cz4m++b1Wq1ykg22Iocurv1JsvQdIURLebwFIwOJvNINniJRe1tcIPvxYsL5sUi01YK
VtbEiMPfi0WWKSEoB/ExeIRb4EYRSGGgxMFmPZBtESw36MFpwVvr2yzr2j4/5RnACvriH0LrSvucAQC0
yCJPfwH0nfDencRIGwznsEkHego5PLAwlfBV8eOGkrW/1LUnzXVt7KxriZYgg/doWO/BGr2PLkVAwTnr
GauUxVLhvN0qjYeWRNUqM2I2nRaLIUArE54Lac1W1cH32A0uAKJmOgC4UGoliyfc09wcgTnkJmrWU9hQ
hdh6UY89qXZ2ALDbLfoc3pfBcHhA36HPjipSE/0/CWONkkJP3UUkN6/Xd69Wbx8fRnOHnhIDtGAkHuyW
ikrR01S2FUbUWCXrMLNxKm/fTemkkI0ydQ7vUFS/e8U4uTwKxsK6nnG/eNu+id82BFSCRUo/Q2v1xXU/
Wfms9s+t4/3MnbKT+ohFXeawubsbfbcDjePMOzQ9VCGoaka9EpPlZSL0EtQ2HZdgTe+AnQ26igStDXrB
WIGglDWVMcg766fPXgGF0iAPPCSDvNqMDQ3RBaEMXvH+SOdETWGozk4oqFwOxIKVTB5vNc6qzdfHOk4h
opHNBLzDckWJafS1Av2ms286+3/qTFtRFaXQwkj0Q8ix7VpsKeQTmqoQVeWRqHDW6iHBRdcXanuHZS/C
UeG9jg8AKYJAWAFbqLH/fuAGoUKn7b5Fw0DSK8f0GeVf9qYs/RtC2mqaeSf8keyctx9QcjE8N2Js4QQ3
UehXnTAKf56iVlx47BQNL5SLjunqSceucVnWGeSjx0g3TfkwBHJCYmTjOv17uXndr4dEjrM9eUITL0w9
v3z/anTVgnEn9qNzk2VHRDnq6xK1jlZrslziz1mHnyBZg0JzE7dxef4L0DC73pXNJsFWWp3Dr8wObqEX
ttDQCR0i+f54lG6ZvP3/9Od02XrO4ftJ4x7/Ckg80OHm5Q3cJpvyWEU1H6qllxpyZHIqa32feg2/xffm
ThEuQXEMM5ZBaG13WK1PB0XN1a95lO6kzfv7XlJBXwEmei5nug7L+8ot4QetJ0y23hqOwzkD5zC1q46v
XyfzaRdnM84ub5sjVp7vnLNLFxFLI1nFYjPIlI0Xcrifrf1KeZT9b8UbU9pgqtElpESiPOJnd5+Z4bBP
InbFoMib726mKkisTHpFHMXMUB4yjEh63Krn61kux82p908AI2ou4LX5z+A1iORfwivrhFeiHNAYkTg8
2GbvyHj6OwAA//+FlLT/+w4AAA==
`,
	},

	"/manifests/maximum_php.yml": {
		name:    "maximum_php.yml",
		local:   "manifests/maximum_php.yml",
		size:    3835,
		modtime: 1542198188,
		compressed: `
H4sIAAAAAAAC/+xW34vcNhB+918x3L1ky+7m9gih+K0tLQ0ECrkLfSjFyPKsrZwsqZqR9zZ/fZHstb2/
8qP0oYUQCKeZ0cz4m++b1Wq1ykg22Iocurv1JsvQdIURLebwFIwOJvNINniJRe1tcIPvxYsL5sUi01YK
VtbEiMPfi0WWKSEoB/ExeIRb4EYRSGGgxMFmPZBtESw36MFpwVvr2yzr2j4/5RnACvriH0LrSvucAQC0
yCJPfwH0nfDencRIGwznsEkHego5PLAwlfBV8eOGkrW/1LUnzXVt7KxriZYgg/doWO/BGr2PLkVAwTnr
GauUxVLhvN0qjYeWRNUqM2I2nRaLIUArE54Lac1W1cH32A0uAKJmOgC4UGoliyfc09wcgTnkJmrWU9hQ
hdh6UY89qXZ2ALDbLfoc3pfBcHhA36HPjipSE/0/CWONkkJP3UUkN6/Xd69Wbx8fRnOHnhIDtGAkHuyW
ikrR01S2FUbUWCXrMLNxKm/fTemkkI0ydQ7vUFS/e8U4uTwKxsK6nnG/eNu+id82BFSCRUo/Q2v1xXU/
Wfms9s+t4/3MnbKT+ohFXeawubsbfbcDjePMOzQ9VCGoaka9EpPlZSL0EtQ2HZdgTe+AnQ26igStDXrB
WIGglDWVMcg766fPXgGF0iAPPCSDvNqMDQ3RBaEMXvH+SOdETWGozk4oqFwOxIKVTB5vNc6qzdfHOk4h
opHNBLzDckWJafS1Av2ms286+3/qTFtRFaXQwkj0Q8ix7VpsKeQTmqoQVeWRqHDW6iHBRdcXanuHZS/C
UeG9jg8AKYJAWAFbqLH/fuAGoUKn7b5Fw0DSK8f0GeVf9qYs/RtC2mqaeSf8keyctx9QcjE8N2Js4QQ3
UehXnTAKf56iVlx47BQNL5SLjunqSceucVnWGeSjx0g3TfkwBHJCYmTjOv17uXndr4dEjrM9eUITL0w9
v3z/anTVgnEn9qNzk2VHRDnq6xK1jlZrslziz1mHnyBZg0JzE7dxef4L0DC73pXNJsFWWp3Dr8wObqEX
ttDQCR0i+f54lG6ZvP3/9Od02XrO4ftJ4x7/Ckg80OHm5Q3cJpvyWEU1H6qllxpyZHIqa32feg2/xffm
ThEuQXEMM5ZBaG13WK1PB0XN1a95lO6kzfv7XlJBXwEmei5nug7L+8ot4QetJ0y23hqOwzkD5zC1q46v
XyfzaRdnM84ub5sjVp7vnLNLFxFLI1nFYjPIlI0Xcrifrf1KeZT9b8UbU9pgqtElpESiPOJnd5+Z4bBP
InbFoMib726mKkisTHpFHMXMUB4yjEh63Krn61kux82p908AI2ou4LX5z+A1iORfwivrhFeiHNAYkTg8
2GbvyHj6OwAA//+FlLT/+w4AAA==
`,
	},

	"/manifests/medium_php.yml": {
		name:    "medium_php.yml",
		local:   "manifests/medium_php.yml",
		size:    3835,
		modtime: 1542198179,
		compressed: `
H4sIAAAAAAAC/+xW34vcNhB+918x3L1ky+7m9gih+K0tLQ0ECrkLfSjFyPKsrZwsqZqR9zZ/fZHstb2/
8qP0oYUQCKeZ0cz4m++b1Wq1ykg22Iocurv1JsvQdIURLebwFIwOJvNINniJRe1tcIPvxYsL5sUi01YK
VtbEiMPfi0WWKSEoB/ExeIRb4EYRSGGgxMFmPZBtESw36MFpwVvr2yzr2j4/5RnACvriH0LrSvucAQC0
yCJPfwH0nfDencRIGwznsEkHego5PLAwlfBV8eOGkrW/1LUnzXVt7KxriZYgg/doWO/BGr2PLkVAwTnr
GauUxVLhvN0qjYeWRNUqM2I2nRaLIUArE54Lac1W1cH32A0uAKJmOgC4UGoliyfc09wcgTnkJmrWU9hQ
hdh6UY89qXZ2ALDbLfoc3pfBcHhA36HPjipSE/0/CWONkkJP3UUkN6/Xd69Wbx8fRnOHnhIDtGAkHuyW
ikrR01S2FUbUWCXrMLNxKm/fTemkkI0ydQ7vUFS/e8U4uTwKxsK6nnG/eNu+id82BFSCRUo/Q2v1xXU/
Wfms9s+t4/3MnbKT+ohFXeawubsbfbcDjePMOzQ9VCGoaka9EpPlZSL0EtQ2HZdgTe+AnQ26igStDXrB
WIGglDWVMcg766fPXgGF0iAPPCSDvNqMDQ3RBaEMXvH+SOdETWGozk4oqFwOxIKVTB5vNc6qzdfHOk4h
opHNBLzDckWJafS1Av2ms286+3/qTFtRFaXQwkj0Q8ix7VpsKeQTmqoQVeWRqHDW6iHBRdcXanuHZS/C
UeG9jg8AKYJAWAFbqLH/fuAGoUKn7b5Fw0DSK8f0GeVf9qYs/RtC2mqaeSf8keyctx9QcjE8N2Js4QQ3
UehXnTAKf56iVlx47BQNL5SLjunqSceucVnWGeSjx0g3TfkwBHJCYmTjOv17uXndr4dEjrM9eUITL0w9
v3z/anTVgnEn9qNzk2VHRDnq6xK1jlZrslziz1mHnyBZg0JzE7dxef4L0DC73pXNJsFWWp3Dr8wObqEX
ttDQCR0i+f54lG6ZvP3/9Od02XrO4ftJ4x7/Ckg80OHm5Q3cJpvyWEU1H6qllxpyZHIqa32feg2/xffm
ThEuQXEMM5ZBaG13WK1PB0XN1a95lO6kzfv7XlJBXwEmei5nug7L+8ot4QetJ0y23hqOwzkD5zC1q46v
XyfzaRdnM84ub5sjVp7vnLNLFxFLI1nFYjPIlI0Xcrifrf1KeZT9b8UbU9pgqtElpESiPOJnd5+Z4bBP
InbFoMib726mKkisTHpFHMXMUB4yjEh63Krn61kux82p908AI2ou4LX5z+A1iORfwivrhFeiHNAYkTg8
2GbvyHj6OwAA//+FlLT/+w4AAA==
`,
	},

	"/manifests/small_php.yml": {
		name:    "small_php.yml",
		local:   "manifests/small_php.yml",
		size:    3836,
		modtime: 1542198149,
		compressed: `
H4sIAAAAAAAC/+xW34vcNhB+918x3L1ky+7m9gih+K0tLQ0ECrkLfSjFyPKsrZwsqZqR9zZ/fZHstb2/
8qP0oYUQCKeZ0cz4m++b1Wq1ykg22Iocurv1JsvQdIURLebwFIwOJvNINniJRe1tcIPvxYsL5sUi01YK
VtbEiMPfi0WWKSEoB/ExeIRb4EYRSGGgxMFmPZBtESw36MFpwVvr2yzr2j4/5RnACvriH0LrSvucAQC0
yCJPfwH0nfDencRIGwznsEkHego5PLAwlfBV8eOGkrW/1LUnzXVt7KxriZYgg/doWO/BGr2PLkVAwTnr
GauUxVLhvN0qjYeWRNUqM2I2nRaLIUArE54Lac1W1cH32A0uAKJmOgC4UGoliyfc09wcgTnkJmrWU9hQ
hdh6UY89qXZ2ALDbLfoc3pfBcHhA36HPjipSE/0/CWONkkJP3UUkN6/Xd69Wbx8fRnOHnhIDtGAkHuyW
ikrR01S2FUbUWCXrMLNxKm/fTemkkI0ydQ7vUFS/e8U4uTwKxsK6nnG/eNu+id82BFSCRUo/Q2v1xXU/
Wfms9s+t4/3MnbKT+ohFXeawubsbfbcDjePMOzQ9VCGoaka9EpPlZSL0EtQ2HZdgTe+AnQ26igStDXrB
WIGglDWVMcg766fPXgGF0iAPPCSDvNqMDQ3RBaEMXvH+SOdETWGozk4oqFwOxIKVTB5vNc6qzdfHOk4h
opHNBLzDckWJafTVAv0mtG9C+38KTVtRFaXQwkj0Q8ix7VpsKeQTmqoQVeWRqHDW6iHBRdcXinuHZa/C
UeK9kA8AKYJAWAFbqLH/fuAGoUKn7b5Fw0DSK8f0Gelf9qYs/SNC2mqaeSf8keyctx9QcjG8N2Js4QQ3
UehXnTAKf56iVlx47BQNT5SLjunqSceucVnWGeSj10g3TfkwBHJCYmTjOv17uXndr4dEjrNFeUITL0w9
v3z/anTVgnEn9qNzk2VHRDnq6xK1jnZrslziz1mHnyBZg0JzE7dxef4T0DC73pXNJsFWWp3Dr8wObqEX
ttDQCR0i+f54lG6ZvP3/9Od02XrO4ftJ4x7/Ckg80OHm5Q3cJpvyWEU1H6qlpxpyZHIqa32feg2/xQfn
ThEuQXEMM5ZBaG13WK1PB0XN1a95lO6kzfv7XlJBXwEmei5nug7L+8ot4QetJ0y23hqOwzkD5zC1q46v
XyfzaRdnM84ub5sjVp7vnLNLFxFLI1nFYjPIlI0Xcrifrf1KeZT9b8UbU9pgqtElpESiPOJnd5+Z4bBP
InbFoMib726mKkisTHpFHMXMUB4yjEh63Krn61kux82p908AI2ou4LX5z+A1iORfwivrhFeiHNAYkTg8
2GYPyXj6OwAA///T5Zjd/A4AAA==
`,
	},

	"/manifests": {
		name:  "manifests",
		local: `manifests`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"manifests": {
		_escData["/manifests/large_php.yml"],
		_escData["/manifests/maximum_php.yml"],
		_escData["/manifests/medium_php.yml"],
		_escData["/manifests/small_php.yml"],
	},
}
